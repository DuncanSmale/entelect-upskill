plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

group = 'com.entelect'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2020.0.3")
    set('mapstructVersion', "1.5.2.Final")
    set('lombokVersion', '1.18.22')
    set('lombokMapstructBindingVersion', '0.2.0')
    set('camundaVersion', "7.15.0")
    set('camundaJacksonVersion', "1.10.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'

    implementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaVersion}")
    implementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaVersion}")
    implementation("org.camunda.bpm:camunda-engine-plugin-spin:${camundaVersion}")
    implementation("org.camunda.spin:camunda-spin-dataformat-json-jackson:${camundaJacksonVersion}")

    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    testImplementation "org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}", "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaVersion}")
    testImplementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaVersion}")
    testImplementation("org.camunda.bpm:camunda-engine-plugin-spin:${camundaVersion}")
    testImplementation("org.camunda.spin:camunda-spin-dataformat-json-jackson:${camundaJacksonVersion}")

    testImplementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-test:${camundaVersion}")
    testImplementation("org.mockito:mockito-inline")
    testImplementation("com.h2database:h2")

    testImplementation('org.camunda.bpm.extension:camunda-bpm-junit5:1.0.0')
    testImplementation('org.camunda.bpm.assert:camunda-bpm-assert:6.0.0')
    testImplementation("org.camunda.consulting.snippets:process-test-coverage:0.2.3")

    testImplementation("org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-test:${camundaVersion}")
}

tasks.named('test') {
    useJUnitPlatform()
}
